데이터베이스 튜닝 방법중 가장 큰 방법이 기획자에게 기획을 수정하자고 요청하는 것이다.
가령 문제가 있는 기획에서 이 부분 때문에 서버가 죽을 것이다 라고 잘 설명해주는 것도 하나의 방법이다.




make database for gerrit & config.

mysql> CREATE USER 'gerrit'@'%' IDENTIFIED BY 'secret';
Query OK, 0 rows affected (0.00 sec)

	mysql> show databases;
	+--------------------+
	| Database           |
	+--------------------+
	| information_schema |
	| mysql              |
	| performance_schema |
	+--------------------+
	3 rows in set (0.00 sec)

	mysql> create database reviewdb
	    -> ;
			Query OK, 1 row affected (0.00 sec)

	mysql> ALTER DATABASE reviewdb charset=latin1;
	Query OK, 1 row affected (0.00 sec)

	mysql> GRANT ALL ON reviewdb.* TO 'gerrit'@'%';
	Query OK, 0 rows affected (0.00 sec)

	mysql> FLUSH PRIVILEGES;
	Query OK, 0 rows affected (0.00 sec)



	---------------------------------------------------------------------------------------------

	현재 내가 가지고 있는 가장 큰 고민중 하나.

	내가 가지고 있는 업무적 포지션, 그러니까 개발자로서의 업무를 어떻게 가져갈 것인가..

	지금의 포지션은 웹 개발자
	리눅스 환경에서의 개발에는 익숙하다.
	프론트엔드 보다는 백엔드의 개발을 선호하는 편이나, 
	아직 백엔드에 대해서 딮하게 알고 있다고 할순 없다.

	웹이라는 수식어를 유지해야 하는지.. 아예 백엔드로 빠지는 것이 바람직 한지..
	고민..
	
	---------------------------------------------------------------------------------------------

	추상화 개념, 오버라이드, 오버로딩같은 상속 개념, 람다식, 모두 처음에는 없었던 개념.

	처음에 C로 개발을 시작하고나서 사람들이 좀 더 큰 시스템을 좀 더 효율적으로 개발하기 위해 만들어낸 개념...

	처음에 만들어진 계산기는 함수 몇가지, 메인 컨트롤러 1개 정도면 충분히 만들 수 있던 프로그램이었으나

	요즘 만들어지는 프로그램들은 컨트롤러 1개로는 무한히 복잡해질 수밖에 없는 구조가 되어버렸기 때문에

	예를 들어 자바로 한다면 Model에 해당하는 DTO, DAO가 생겨나고, 컨트롤러를 컨트롤하는 더 큰 개념의 컨트롤러가 생겨나고,

	좀 더 멋진 화면을 보여주기 위한 view를 만들기 위한 view만이 가지는 언어가 생겨나게 되었다.

	결국 이것 저것 붙여서 프로그램을 개발하다 보니, 너무 복잡해져서 복잡도를 낮추기 위한 노력들이 수반되어야 하는 문제가 생기게 된다.

	event driven 처리 방식 또한 좀 더 빠른 처리를 위해 생겨난 것.

	개발자들 또는 고객들의 needs를 맞추기 위해서는 새로운 언어, 새로운 개념, 새로운 기술이 나오는 것은 필연적이다.

	하지만 이 모든 것들은 결국 고객들의 요구를 맞추기 위한 개발자의 needs에 의해서 생긴다는 것.

	그렇기 때문에 결국 개발자의 needs를 빠르게 catch하면 한발 앞서서 기술에 대응 하는 것이 가능하다.

  큰 시스템을 개발 하기 위해 여러 사람들이 개발 할 수 있도록 인터페이스라는 것을 만들어 메소드를 추상화시켜서 
	많은 개발자들이 하나의 프로젝트를 개발하는데 도움을 주었고,

	여러개의 기능을 하나의 메소드를 호출해서 사용하기 위해 오버로딩과 오버라이딩 같은 상속 개념이 생겼다.

	이도 저도 불편해서 그냥 메소드 자체를 넘겨서 하나의 메소드에 모든 것을 매핑시킬 수 있도록 만든 개념이 람다식.

  분명 이 다음에도 개발자가 불편하게 느끼는 것을 새롭게 만들어 낼 것이고 언어의 기능으로 추가될 것이다.


	---------------------------------------------------------------------------------------------

	언젠가 어느 블로그에서 질문하는 법을 본적이 있다.
	신입 개발자들을 위해 어떻게 질문을 하고 어떻게 요청을 해야 빠른 답을 얻어낼 수 있는가에 대한 내용이었다.

	최근 작업을 하면서 근래에 입사한 직원들의 질문을 여러번 받다보니 나름대로 깨닫는 것이 생겨 나도 한자 적어보고자 한다.
	미리 말하지만 여기에 적는 것은 지극히 개인적인 생각이니 필요 없다 생각하는 분은 무시하고 넘어가도 좋다.

	개발을 오래 하다보니 나름대로의 원칙이 생겨 혹시 도움이 될까 싶어 몇자 적어본다.

	1. 에러 로그를 절대로 대충 보지 말라.

	2. 머리속에서 완벽한 로직이 만들어 지지 않으면 아무리 시간이 많아도 개발을 완료 할 수 없다.

	3. 물어보는 것보다 찾아보는 것이 먼저다.

	4. 어쩔 수 없이 물어봤다면 잘 들어라.

	대략 이정도로 소제목은 정리 할 수 있겠다.

	자세한 내용은 다음에 이어서..






	
